name: Elixir CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest #kinda standard
    env:
      MIX_ENV: test
      SENPAI_DB_USER: postgres
      SENPAI_DB_PASSWORD: xPof4cWJlfomnWFFRtvKSFf7ZpZNmoR7
      SENPAI_DB_HOST: localhost
      SENPAI_DB_PORT: 5432
      SENPAI_DB_TEST_PORT: 5432
      SENPAI_DB_NAME: senpai_db_test
      SENPAI_TEST_WEB_PORT: 4001
   

    steps:
      - name: Checkout code
        uses: actions/checkout@v4


#need to install docker compose
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start docker compose
        run: docker-compose up -d

      - name: Display Docker Compose logs for db service
        if: always()
        run: docker-compose logs db

      - name: Wait for PostgreSQL to be healthy
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          timeout 60s bash -c 'until docker exec postgres pg_isready -U postgres -d senpai_db_test -q; do sleep 2; done'
          echo "PostgreSQL is ready."

      - name: Set up Elixir
        uses: erlef/setup-elixir@v1
        with:
          elixir-version: '1.18.3' 
          otp-version: '27'



#gemini said thats how they handle caching in elixir CI 
      - name: Restore dependencies cache
        uses: actions/cache@v4
        id: deps-cache
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Install dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: mix deps.get

      - name: mix lint 
        run: mix lint
      

      - name: Run tests
        run: mix test

      - name: Stop services
        if: always() 
        run: docker-compose -f docker-compose.test.yml down